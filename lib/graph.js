"use strict";

var _necessary = require("necessary");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Cycle = require("./graph/cycle"),
    Stack = require("./graph/stack"),
    Vertex = require("./graph/vertex"),
    StronglyConnectedComponent = require("./graph/stronglyConnectedComponent");

var first = _necessary.arrayUtilities.first,
    second = _necessary.arrayUtilities.second;

var Graph = /*#__PURE__*/function () {
  function Graph(stronglyConnectedComponents, vertices, cycles) {
    _classCallCheck(this, Graph);

    this.stronglyConnectedComponents = stronglyConnectedComponents;
    this.vertices = vertices;
    this.cycles = cycles;
  }

  _createClass(Graph, [{
    key: "getStronglyConnectedComponents",
    value: function getStronglyConnectedComponents() {
      return this.stronglyConnectedComponents;
    }
  }, {
    key: "getVertices",
    value: function getVertices() {
      return this.vertices;
    }
  }, {
    key: "getCycles",
    value: function getCycles() {
      return this.cycles;
    }
  }, {
    key: "isVertexPresent",
    value: function isVertexPresent(name) {
      var vertexPresent = this.vertices.some(function (vertex) {
        var vertexName = vertex.getName();

        if (vertexName === name) {
          return true;
        }
      });
      return vertexPresent;
    }
  }], [{
    key: "fromVertexLiterals",
    value: function fromVertexLiterals(vertexLiterals) {
      var vertexMap = vertexLiterals.reduce(function (vertexMap, vertexLiteral) {
        addVertexLiteral(vertexMap, vertexLiteral);
        return vertexMap;
      }, {}),
          vertices = verticesFromVertexMap(vertexMap),
          stronglyConnectedComponents = stronglyConnectedComponentsFromVertices(vertices),
          cycles = cyclesFromStronglyConnectedComponents(stronglyConnectedComponents),
          graph = new Graph(stronglyConnectedComponents, vertices, cycles);
      return graph;
    }
  }]);

  return Graph;
}();

module.exports = Graph;

function addVertexLiteral(vertexMap, vertexLiteral) {
  var firstVertexLiteralElement = first(vertexLiteral),
      secondVertexLiteralElement = second(vertexLiteral),
      vertexName = firstVertexLiteralElement,
      ///
  descendantVertexNames = secondVertexLiteralElement; ///

  var successorVertices = descendantVertexNames.map(function (descendantVertexName) {
    var successorVertex;
    var successorVertexName = descendantVertexName,
        ///
    successorVertexExists = vertexMap.hasOwnProperty(successorVertexName);

    if (successorVertexExists) {
      successorVertex = vertexMap[successorVertexName];
    } else {
      successorVertex = Vertex.fromVertexName(successorVertexName);
      vertexMap[successorVertexName] = successorVertex;
    }

    return successorVertex;
  });
  var vertex;
  var vertexExists = vertexMap.hasOwnProperty(vertexName);

  if (vertexExists) {
    vertex = vertexMap[vertexName];
  } else {
    vertex = Vertex.fromVertexName(vertexName);
    vertexMap[vertexName] = vertex;
  }

  successorVertices = successorVertices.concat([]).reverse(); ///

  vertex.setSuccessorVertices(successorVertices);
}

function verticesFromVertexMap(vertexMap) {
  var vertexNames = Object.keys(vertexMap),
      vertices = vertexNames.map(function (vertexName) {
    var vertex = vertexMap[vertexName];
    return vertex;
  });
  return vertices;
}

function stronglyConnectedComponentsFromVertices(vertices) {
  var stack = new Stack(),
      stronglyConnectedComponents = [];
  var index = 0;

  function stronglyConnectVertex(vertex) {
    var lowestIndex = index; ///

    vertex.setIndex(index);
    vertex.setLowestIndex(lowestIndex);
    index++;
    stack.push(vertex);
    var successorVertices = vertex.getSuccessorVertices();
    successorVertices.forEach(function (successorVertex) {
      var successorVertexUnindexed = successorVertex.isUnindexed(),
          successorVertexNotStronglyConnected = successorVertexUnindexed; ///

      if (successorVertexNotStronglyConnected) {
        stronglyConnectVertex(successorVertex);
        var successorVertexLowestIndex = successorVertex.getLowestIndex();
        vertex.updateLowestIndex(successorVertexLowestIndex);
      } else {
        var successorVertexStacked = successorVertex.isStacked();

        if (successorVertexStacked) {
          var successorVertexIndex = successorVertex.getIndex();
          vertex.updateLowestIndex(successorVertexIndex);
        }
      }
    });
    var vertexLowest = vertex.isLowest();

    if (vertexLowest) {
      var stronglyConnectedComponent = StronglyConnectedComponent.fromStackAndVertex(stack, vertex);
      stronglyConnectedComponents.push(stronglyConnectedComponent);
    }
  }

  vertices.forEach(function (vertex) {
    var vertexUnindexed = vertex.isUnindexed();

    if (vertexUnindexed) {
      stronglyConnectVertex(vertex);
    }
  });
  return stronglyConnectedComponents;
}

function cyclesFromStronglyConnectedComponents(stronglyConnectedComponents) {
  var cycles = stronglyConnectedComponents.reduce(function (cycles, stronglyConnectedComponent) {
    var stronglyConnectedComponentCyclic = stronglyConnectedComponent.isCyclic();

    if (stronglyConnectedComponentCyclic) {
      var cycle = Cycle.fromStronglyConnectedComponent(stronglyConnectedComponent);
      cycles.push(cycle);
    }

    return cycles;
  }, []);
  return cycles;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,