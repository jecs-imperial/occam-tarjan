'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Cycle = require('./graph/cycle'),
    Stack = require('./graph/stack'),
    Vertex = require('./graph/vertex'),
    Component = require('./graph/component'),
    arrayUtil = require('./util/array');

var Graph = function () {
  function Graph(vertices, components, cycles) {
    _classCallCheck(this, Graph);

    this.vertices = vertices;
    this.components = components;
    this.cycles = cycles;
  }

  _createClass(Graph, [{
    key: 'getVertices',
    value: function getVertices() {
      return this.vertices;
    }
  }, {
    key: 'getComponents',
    value: function getComponents() {
      return this.components;
    }
  }, {
    key: 'getCycles',
    value: function getCycles() {
      return this.cycles;
    }
  }, {
    key: 'isVertexPresent',
    value: function isVertexPresent(name) {
      var vertexPresent = this.vertices.some(function (vertex) {
        var vertexName = vertex.getName();

        if (vertexName === name) {
          return true;
        }
      });

      return vertexPresent;
    }
  }], [{
    key: 'fromVertexLiterals',
    value: function fromVertexLiterals(vertexLiterals) {
      var vertexMap = vertexLiterals.reduce(function (vertexMap, vertexLiteral) {
        addVertexLiteral(vertexMap, vertexLiteral);

        return vertexMap;
      }, {}),
          vertices = verticesFromVertexMap(vertexMap),
          components = componentsFromVertices(vertices),
          cycles = cyclesFromComponents(components),
          graph = new Graph(vertices, components, cycles);

      return graph;
    }
  }]);

  return Graph;
}();

module.exports = Graph;

function addVertexLiteral(vertexMap, vertexLiteral) {
  var firstVertexLiteralElement = arrayUtil.first(vertexLiteral),
      secondVertexLiteralElement = arrayUtil.second(vertexLiteral),
      name = firstVertexLiteralElement,
      ///
  descendantVertexNames = secondVertexLiteralElement; ///

  var successorVertices = descendantVertexNames.map(function (descendantVertexName) {
    var successorVertex = void 0;

    var successorVertexName = descendantVertexName,
        ///
    successorVertexExists = vertexMap.hasOwnProperty(successorVertexName);

    if (successorVertexExists) {
      successorVertex = vertexMap[successorVertexName];
    } else {
      successorVertex = Vertex.fromName(successorVertexName);

      vertexMap[successorVertexName] = successorVertex;
    }

    return successorVertex;
  });

  var vertex = void 0;

  var vertexExists = vertexMap.hasOwnProperty(name);

  if (vertexExists) {
    vertex = vertexMap[name];
  } else {
    vertex = Vertex.fromName(name);

    vertexMap[name] = vertex;
  }

  successorVertices = successorVertices.concat([]).reverse(); ///

  vertex.setSuccessorVertices(successorVertices);
}

function verticesFromVertexMap(vertexMap) {
  var names = Object.keys(vertexMap),
      vertices = names.map(function (name) {
    var vertex = vertexMap[name];

    return vertex;
  });

  return vertices;
}

function componentsFromVertices(vertices) {
  var stack = new Stack(),
      components = [];

  var index = 0;

  function stronglyConnectVertex(vertex) {
    var lowestIndex = index; ///

    vertex.setIndex(index);

    vertex.setLowestIndex(lowestIndex);

    index++;

    stack.push(vertex);

    var successorVertices = vertex.getSuccessorVertices();

    successorVertices.forEach(function (successorVertex) {
      var successorVertexUnindexed = successorVertex.isUnindexed(),
          successorVertexNotStronglyConnected = successorVertexUnindexed; ///

      if (successorVertexNotStronglyConnected) {
        stronglyConnectVertex(successorVertex);

        var successorVertexLowestIndex = successorVertex.getLowestIndex();

        vertex.updateLowestIndex(successorVertexLowestIndex);
      } else {
        var successorVertexStacked = successorVertex.isStacked();

        if (successorVertexStacked) {
          var successorVertexIndex = successorVertex.getIndex();

          vertex.updateLowestIndex(successorVertexIndex);
        }
      }
    });

    var vertexLowest = vertex.isLowest();

    if (vertexLowest) {
      var component = Component.fromStackAndVertex(stack, vertex);

      components.push(component);
    }
  }

  vertices.forEach(function (vertex) {
    var vertexUnindexed = vertex.isUnindexed();

    if (vertexUnindexed) {
      stronglyConnectVertex(vertex);
    }
  });

  return components;
}

function cyclesFromComponents(components) {
  var cycles = components.reduce(function (cycles, component) {
    var componentCyclic = component.isCyclic();

    if (componentCyclic) {
      var cycle = Cycle.fromComponent(component);

      cycles.push(cycle);
    }

    return cycles;
  }, []);

  return cycles;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,