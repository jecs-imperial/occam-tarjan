'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var necessary = require('necessary');

var Cycle = require('./graph/cycle'),
    Stack = require('./graph/stack'),
    Vertex = require('./graph/vertex'),
    StronglyConnectedComponent = require('./graph/stronglyConnectedComponent');

var arrayUtilities = necessary.arrayUtilities,
    first = arrayUtilities.first,
    second = arrayUtilities.second;

var Graph = /*#__PURE__*/function () {
  function Graph(vertices, stronglyConnectedComponents, cycles) {
    _classCallCheck(this, Graph);

    this.vertices = vertices;
    this.stronglyConnectedComponents = stronglyConnectedComponents;
    this.cycles = cycles;
  }

  _createClass(Graph, [{
    key: "getVertices",
    value: function getVertices() {
      return this.vertices;
    }
  }, {
    key: "getStronglyConnectedComponents",
    value: function getStronglyConnectedComponents() {
      return this.stronglyConnectedComponents;
    }
  }, {
    key: "getCycles",
    value: function getCycles() {
      return this.cycles;
    }
  }, {
    key: "isVertexPresent",
    value: function isVertexPresent(name) {
      var vertexPresent = this.vertices.some(function (vertex) {
        var vertexName = vertex.getName();

        if (vertexName === name) {
          return true;
        }
      });
      return vertexPresent;
    }
  }], [{
    key: "fromVertexLiterals",
    value: function fromVertexLiterals(vertexLiterals) {
      var vertexMap = vertexLiterals.reduce(function (vertexMap, vertexLiteral) {
        addVertexLiteral(vertexMap, vertexLiteral);
        return vertexMap;
      }, {}),
          vertices = verticesFromVertexMap(vertexMap),
          stronglyConnectedComponents = stronglyConnectedComponentsFromVertices(vertices),
          cycles = cyclesFromStronglyConnectedComponents(stronglyConnectedComponents),
          graph = new Graph(vertices, stronglyConnectedComponents, cycles);
      return graph;
    }
  }]);

  return Graph;
}();

module.exports = Graph;

function addVertexLiteral(vertexMap, vertexLiteral) {
  var firstVertexLiteralElement = first(vertexLiteral),
      secondVertexLiteralElement = second(vertexLiteral),
      vertexName = firstVertexLiteralElement,
      ///
  descendantVertexNames = secondVertexLiteralElement; ///

  var successorVertices = descendantVertexNames.map(function (descendantVertexName) {
    var successorVertex;
    var successorVertexName = descendantVertexName,
        ///
    successorVertexExists = vertexMap.hasOwnProperty(successorVertexName);

    if (successorVertexExists) {
      successorVertex = vertexMap[successorVertexName];
    } else {
      successorVertex = Vertex.fromVertexName(successorVertexName);
      vertexMap[successorVertexName] = successorVertex;
    }

    return successorVertex;
  });
  var vertex;
  var vertexExists = vertexMap.hasOwnProperty(vertexName);

  if (vertexExists) {
    vertex = vertexMap[vertexName];
  } else {
    vertex = Vertex.fromVertexName(vertexName);
    vertexMap[vertexName] = vertex;
  }

  successorVertices = successorVertices.concat([]).reverse(); ///

  vertex.setSuccessorVertices(successorVertices);
}

function verticesFromVertexMap(vertexMap) {
  var vertexNames = Object.keys(vertexMap),
      vertices = vertexNames.map(function (vertexName) {
    var vertex = vertexMap[vertexName];
    return vertex;
  });
  return vertices;
}

function stronglyConnectedComponentsFromVertices(vertices) {
  var stack = new Stack(),
      stronglyConnectedComponents = [];
  var index = 0;

  function stronglyConnectVertex(vertex) {
    var lowestIndex = index; ///

    vertex.setIndex(index);
    vertex.setLowestIndex(lowestIndex);
    index++;
    stack.push(vertex);
    var successorVertices = vertex.getSuccessorVertices();
    successorVertices.forEach(function (successorVertex) {
      var successorVertexUnindexed = successorVertex.isUnindexed(),
          successorVertexNotStronglyConnected = successorVertexUnindexed; ///

      if (successorVertexNotStronglyConnected) {
        stronglyConnectVertex(successorVertex);
        var successorVertexLowestIndex = successorVertex.getLowestIndex();
        vertex.updateLowestIndex(successorVertexLowestIndex);
      } else {
        var successorVertexStacked = successorVertex.isStacked();

        if (successorVertexStacked) {
          var successorVertexIndex = successorVertex.getIndex();
          vertex.updateLowestIndex(successorVertexIndex);
        }
      }
    });
    var vertexLowest = vertex.isLowest();

    if (vertexLowest) {
      var stronglyConnectedComponent = StronglyConnectedComponent.fromStackAndVertex(stack, vertex);
      stronglyConnectedComponents.push(stronglyConnectedComponent);
    }
  }

  vertices.forEach(function (vertex) {
    var vertexUnindexed = vertex.isUnindexed();

    if (vertexUnindexed) {
      stronglyConnectVertex(vertex);
    }
  });
  return stronglyConnectedComponents;
}

function cyclesFromStronglyConnectedComponents(stronglyConnectedComponents) {
  var cycles = stronglyConnectedComponents.reduce(function (cycles, stronglyConnectedComponent) {
    var stronglyConnectedComponentCyclic = stronglyConnectedComponent.isCyclic();

    if (stronglyConnectedComponentCyclic) {
      var cycle = Cycle.fromStronglyConnectedComponent(stronglyConnectedComponent);
      cycles.push(cycle);
    }

    return cycles;
  }, []);
  return cycles;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyYXBoLmpzIl0sIm5hbWVzIjpbIm5lY2Vzc2FyeSIsInJlcXVpcmUiLCJDeWNsZSIsIlN0YWNrIiwiVmVydGV4IiwiU3Ryb25nbHlDb25uZWN0ZWRDb21wb25lbnQiLCJhcnJheVV0aWxpdGllcyIsImZpcnN0Iiwic2Vjb25kIiwiR3JhcGgiLCJ2ZXJ0aWNlcyIsInN0cm9uZ2x5Q29ubmVjdGVkQ29tcG9uZW50cyIsImN5Y2xlcyIsIm5hbWUiLCJ2ZXJ0ZXhQcmVzZW50Iiwic29tZSIsInZlcnRleCIsInZlcnRleE5hbWUiLCJnZXROYW1lIiwidmVydGV4TGl0ZXJhbHMiLCJ2ZXJ0ZXhNYXAiLCJyZWR1Y2UiLCJ2ZXJ0ZXhMaXRlcmFsIiwiYWRkVmVydGV4TGl0ZXJhbCIsInZlcnRpY2VzRnJvbVZlcnRleE1hcCIsInN0cm9uZ2x5Q29ubmVjdGVkQ29tcG9uZW50c0Zyb21WZXJ0aWNlcyIsImN5Y2xlc0Zyb21TdHJvbmdseUNvbm5lY3RlZENvbXBvbmVudHMiLCJncmFwaCIsIm1vZHVsZSIsImV4cG9ydHMiLCJmaXJzdFZlcnRleExpdGVyYWxFbGVtZW50Iiwic2Vjb25kVmVydGV4TGl0ZXJhbEVsZW1lbnQiLCJkZXNjZW5kYW50VmVydGV4TmFtZXMiLCJzdWNjZXNzb3JWZXJ0aWNlcyIsIm1hcCIsImRlc2NlbmRhbnRWZXJ0ZXhOYW1lIiwic3VjY2Vzc29yVmVydGV4Iiwic3VjY2Vzc29yVmVydGV4TmFtZSIsInN1Y2Nlc3NvclZlcnRleEV4aXN0cyIsImhhc093blByb3BlcnR5IiwiZnJvbVZlcnRleE5hbWUiLCJ2ZXJ0ZXhFeGlzdHMiLCJjb25jYXQiLCJyZXZlcnNlIiwic2V0U3VjY2Vzc29yVmVydGljZXMiLCJ2ZXJ0ZXhOYW1lcyIsIk9iamVjdCIsImtleXMiLCJzdGFjayIsImluZGV4Iiwic3Ryb25nbHlDb25uZWN0VmVydGV4IiwibG93ZXN0SW5kZXgiLCJzZXRJbmRleCIsInNldExvd2VzdEluZGV4IiwicHVzaCIsImdldFN1Y2Nlc3NvclZlcnRpY2VzIiwiZm9yRWFjaCIsInN1Y2Nlc3NvclZlcnRleFVuaW5kZXhlZCIsImlzVW5pbmRleGVkIiwic3VjY2Vzc29yVmVydGV4Tm90U3Ryb25nbHlDb25uZWN0ZWQiLCJzdWNjZXNzb3JWZXJ0ZXhMb3dlc3RJbmRleCIsImdldExvd2VzdEluZGV4IiwidXBkYXRlTG93ZXN0SW5kZXgiLCJzdWNjZXNzb3JWZXJ0ZXhTdGFja2VkIiwiaXNTdGFja2VkIiwic3VjY2Vzc29yVmVydGV4SW5kZXgiLCJnZXRJbmRleCIsInZlcnRleExvd2VzdCIsImlzTG93ZXN0Iiwic3Ryb25nbHlDb25uZWN0ZWRDb21wb25lbnQiLCJmcm9tU3RhY2tBbmRWZXJ0ZXgiLCJ2ZXJ0ZXhVbmluZGV4ZWQiLCJzdHJvbmdseUNvbm5lY3RlZENvbXBvbmVudEN5Y2xpYyIsImlzQ3ljbGljIiwiY3ljbGUiLCJmcm9tU3Ryb25nbHlDb25uZWN0ZWRDb21wb25lbnQiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQUVBLElBQU1BLFNBQVMsR0FBR0MsT0FBTyxDQUFDLFdBQUQsQ0FBekI7O0FBRUEsSUFBTUMsS0FBSyxHQUFHRCxPQUFPLENBQUMsZUFBRCxDQUFyQjtBQUFBLElBQ01FLEtBQUssR0FBR0YsT0FBTyxDQUFDLGVBQUQsQ0FEckI7QUFBQSxJQUVNRyxNQUFNLEdBQUdILE9BQU8sQ0FBQyxnQkFBRCxDQUZ0QjtBQUFBLElBR01JLDBCQUEwQixHQUFHSixPQUFPLENBQUMsb0NBQUQsQ0FIMUM7O0FBS00sSUFBRUssY0FBRixHQUFxQk4sU0FBckIsQ0FBRU0sY0FBRjtBQUFBLElBQ0VDLEtBREYsR0FDb0JELGNBRHBCLENBQ0VDLEtBREY7QUFBQSxJQUNTQyxNQURULEdBQ29CRixjQURwQixDQUNTRSxNQURUOztJQUdBQyxLO0FBQ0osaUJBQWFDLFFBQWIsRUFBdUJDLDJCQUF2QixFQUFvREMsTUFBcEQsRUFBNEQ7QUFBQTs7QUFDMUQsU0FBS0YsUUFBTCxHQUFnQkEsUUFBaEI7QUFDQSxTQUFLQywyQkFBTCxHQUFtQ0Es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QixFQUE2QztBQUM3RixRQUFNRyxnQ0FBZ0MsR0FBR0gsMEJBQTBCLENBQUNJLFFBQTNCLEVBQXpDOztBQUVBLFFBQUlELGdDQUFKLEVBQXNDO0FBQ3BDLFVBQU1FLEtBQUssR0FBR3hFLEtBQUssQ0FBQ3lFLDhCQUFOLENBQXFDTiwwQkFBckMsQ0FBZDtBQUVBekQsTUFBQUEsTUFBTSxDQUFDMEMsSUFBUCxDQUFZb0IsS0FBWjtBQUNEOztBQUVELFdBQU85RCxNQUFQO0FBQ0QsR0FWYyxFQVVaLEVBVlksQ0FBZjtBQVlBLFNBQU9BLE1BQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgbmVjZXNzYXJ5ID0gcmVxdWlyZSgnbmVjZXNzYXJ5Jyk7XG5cbmNvbnN0IEN5Y2xlID0gcmVxdWlyZSgnLi9ncmFwaC9jeWNsZScpLFxuICAgICAgU3RhY2sgPSByZXF1aXJlKCcuL2dyYXBoL3N0YWNrJyksXG4gICAgICBWZXJ0ZXggPSByZXF1aXJlKCcuL2dyYXBoL3ZlcnRleCcpLFxuICAgICAgU3Ryb25nbHlDb25uZWN0ZWRDb21wb25lbnQgPSByZXF1aXJlKCcuL2dyYXBoL3N0cm9uZ2x5Q29ubmVjdGVkQ29tcG9uZW50Jyk7XG5cbmNvbnN0IHsgYXJyYXlVdGlsaXRpZXMgfSA9IG5lY2Vzc2FyeSxcbiAgICAgIHsgZmlyc3QsIHNlY29uZCB9ID0gYXJyYXlVdGlsaXRpZXM7XG5cbmNsYXNzIEdyYXBoIHtcbiAgY29uc3RydWN0b3IgKHZlcnRpY2VzLCBzdHJvbmdseUNvbm5lY3RlZENvbXBvbmVudHMsIGN5Y2xlcykge1xuICAgIHRoaXMudmVydGljZXMgPSB2ZXJ0aWNlcztcbiAgICB0aGlzLnN0cm9uZ2x5Q29ubmVjdGVkQ29tcG9uZW50cyA9IHN0cm9uZ2x5Q29ubmVjdGVkQ29tcG9uZW50cztcbiAgICB0aGlzLmN5Y2xlcyA9IGN5Y2xlcztcbiAgfVxuXG4gIGdldFZlcnRpY2VzKCkge1xuICAgIHJldHVybiB0aGlzLnZlcnRpY2VzO1xuICB9XG5cbiAgZ2V0U3Ryb25nbHlDb25uZWN0ZWRDb21wb25lbnRzKCkge1xuICAgIHJldHVybiB0aGlzLnN0cm9uZ2x5Q29ubmVjdGVkQ29tcG9uZW50cztcbiAgfVxuICBcbiAgZ2V0Q3ljbGVzKCkge1xuICAgIHJldHVybiB0aGlzLmN5Y2xlcztcbiAgfVxuICBcbiAgaXNWZXJ0ZXhQcmVzZW50KG5hbWUpIHtcbiAgICBjb25zdCB2ZXJ0ZXhQcmVzZW50ID0gdGhpcy52ZXJ0aWNlcy5zb21lKGZ1bmN0aW9uKHZlcnRleCkge1xuICAgICAgY29uc3QgdmVydGV4TmFtZSA9IHZlcnRleC5nZXROYW1lKCk7XG4gICAgICBcbiAgICAgIGlmICh2ZXJ0ZXhOYW1lID09PSBuYW1lKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHZlcnRleFByZXNlbnQ7XG4gIH1cblxuICBzdGF0aWMgZnJvbVZlcnRleExpdGVyYWxzKHZlcnRleExpdGVyYWxzKSB7XG4gICAgY29uc3QgdmVydGV4TWFwID0gdmVydGV4TGl0ZXJhbHMucmVkdWNlKGZ1bmN0aW9uKHZlcnRleE1hcCwgdmVydGV4TGl0ZXJhbCkge1xuICAgICAgICAgICAgYWRkVmVydGV4TGl0ZXJhbCh2ZXJ0ZXhNYXAsIHZlcnRleExpdGVyYWwpOyAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gdmVydGV4TWFwO1xuICAgICAgICAgIH0sIHt9KSxcbiAgICAgICAgICB2ZXJ0aWNlcyA9IHZlcnRpY2VzRnJvbVZlcnRleE1hcCh2ZXJ0ZXhNYXApLFxuICAgICAgICAgIHN0cm9uZ2x5Q29ubmVjdGVkQ29tcG9uZW50cyA9IHN0cm9uZ2x5Q29ubmVjdGVkQ29tcG9uZW50c0Zyb21WZXJ0aWNlcyh2ZXJ0aWNlcyksXG4gICAgICAgICAgY3ljbGVzID0gY3ljbGVzRnJvbVN0cm9uZ2x5Q29ubmVjdGVkQ29tcG9uZW50cyhzdHJvbmdseUNvbm5lY3RlZENvbXBvbmVudHMpLFxuICAgICAgICAgIGdyYXBoID0gbmV3IEdyYXBoKHZlcnRpY2VzLCBzdHJvbmdseUNvbm5lY3RlZENvbXBvbmVudHMsIGN5Y2xlcyk7XG4gICAgXG4gICAgcmV0dXJuIGdyYXBoO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gR3JhcGg7XG5cbmZ1bmN0aW9uIGFkZFZlcnRleExpdGVyYWwodmVydGV4TWFwLCB2ZXJ0ZXhMaXRlcmFsKSB7XG4gIGNvbnN0IGZpcnN0VmVydGV4TGl0ZXJhbEVsZW1lbnQgPSBmaXJzdCh2ZXJ0ZXhMaXRlcmFsKSxcbiAgICAgICAgc2Vjb25kVmVydGV4TGl0ZXJhbEVsZW1lbnQgPSBzZWNvbmQodmVydGV4TGl0ZXJhbCksXG4gICAgICAgIHZlcnRleE5hbWUgPSBmaXJzdFZlcnRleExpdGVyYWxFbGVtZW50LCAvLy9cbiAgICAgICAgZGVzY2VuZGFudFZlcnRleE5hbWVzID0gc2Vjb25kVmVydGV4TGl0ZXJhbEVsZW1lbnQ7IC8vL1xuXG4gIGxldCBzdWNjZXNzb3JWZXJ0aWNlcyA9IGRlc2NlbmRhbnRWZXJ0ZXhOYW1lcy5tYXAoZnVuY3Rpb24oZGVzY2VuZGFudFZlcnRleE5hbWUpIHtcbiAgICBsZXQgc3VjY2Vzc29yVmVydGV4O1xuXG4gICAgY29uc3Qgc3VjY2Vzc29yVmVydGV4TmFtZSA9IGRlc2NlbmRhbnRWZXJ0ZXhOYW1lLCAgLy8vXG4gICAgICAgICAgc3VjY2Vzc29yVmVydGV4RXhpc3RzID0gdmVydGV4TWFwLmhhc093blByb3BlcnR5KHN1Y2Nlc3NvclZlcnRleE5hbWUpO1xuXG4gICAgaWYgKHN1Y2Nlc3NvclZlcnRleEV4aXN0cykge1xuICAgICAgc3VjY2Vzc29yVmVydGV4ID0gdmVydGV4TWFwW3N1Y2Nlc3NvclZlcnRleE5hbWVdO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdWNjZXNzb3JWZXJ0ZXggPSBWZXJ0ZXguZnJvbVZlcnRleE5hbWUoc3VjY2Vzc29yVmVydGV4TmFtZSk7XG5cbiAgICAgIHZlcnRleE1hcFtzdWNjZXNzb3JWZXJ0ZXhOYW1lXSA9IHN1Y2Nlc3NvclZlcnRleDtcbiAgICB9XG5cbiAgICByZXR1cm4gc3VjY2Vzc29yVmVydGV4O1xuICB9KTtcblxuICBsZXQgdmVydGV4O1xuXG4gIGNvbnN0IHZlcnRleEV4aXN0cyA9IHZlcnRleE1hcC5oYXNPd25Qcm9wZXJ0eSh2ZXJ0ZXhOYW1lKTtcblxuICBpZiAodmVydGV4RXhpc3RzKSB7XG4gICAgdmVydGV4ID0gdmVydGV4TWFwW3ZlcnRleE5hbWVdO1xuICB9IGVsc2Uge1xuICAgIHZlcnRleCA9IFZlcnRleC5mcm9tVmVydGV4TmFtZSh2ZXJ0ZXhOYW1lKTtcblxuICAgIHZlcnRleE1hcFt2ZXJ0ZXhOYW1lXSA9IHZlcnRleDtcbiAgfVxuXG4gIHN1Y2Nlc3NvclZlcnRpY2VzID0gc3VjY2Vzc29yVmVydGljZXMuY29uY2F0KFtdKS5yZXZlcnNlKCk7IC8vL1xuXG4gIHZlcnRleC5zZXRTdWNjZXNzb3JWZXJ0aWNlcyhzdWNjZXNzb3JWZXJ0aWNlcyk7XG59XG5cbmZ1bmN0aW9uIHZlcnRpY2VzRnJvbVZlcnRleE1hcCh2ZXJ0ZXhNYXApIHtcbiAgY29uc3QgdmVydGV4TmFtZXMgPSBPYmplY3Qua2V5cyh2ZXJ0ZXhNYXApLFxuICAgICAgICB2ZXJ0aWNlcyA9IHZlcnRleE5hbWVzLm1hcChmdW5jdGlvbih2ZXJ0ZXhOYW1lKSB7XG4gICAgICAgICAgY29uc3QgdmVydGV4ID0gdmVydGV4TWFwW3ZlcnRleE5hbWVdO1xuICBcbiAgICAgICAgICByZXR1cm4gdmVydGV4O1xuICAgICAgICB9KTtcblxuICByZXR1cm4gdmVydGljZXM7XG59XG5cbmZ1bmN0aW9uIHN0cm9uZ2x5Q29ubmVjdGVkQ29tcG9uZW50c0Zyb21WZXJ0aWNlcyh2ZXJ0aWNlcykge1xuICBjb25zdCBzdGFjayA9IG5ldyBTdGFjaygpLFxuICAgICAgICBzdHJvbmdseUNvbm5lY3RlZENvbXBvbmVudHMgPSBbXTtcblxuICBsZXQgaW5kZXggPSAwO1xuXG4gIGZ1bmN0aW9uIHN0cm9uZ2x5Q29ubmVjdFZlcnRleCh2ZXJ0ZXgpIHtcbiAgICBjb25zdCBsb3dlc3RJbmRleCA9IGluZGV4OyAgLy8vXG5cbiAgICB2ZXJ0ZXguc2V0SW5kZXgoaW5kZXgpO1xuXG4gICAgdmVydGV4LnNldExvd2VzdEluZGV4KGxvd2VzdEluZGV4KTtcblxuICAgIGluZGV4Kys7XG5cbiAgICBzdGFjay5wdXNoKHZlcnRleCk7XG5cbiAgICBjb25zdCBzdWNjZXNzb3JWZXJ0aWNlcyA9IHZlcnRleC5nZXRTdWNjZXNzb3JWZXJ0aWNlcygpO1xuXG4gICAgc3VjY2Vzc29yVmVydGljZXMuZm9yRWFjaChmdW5jdGlvbihzdWNjZXNzb3JWZXJ0ZXgpIHtcbiAgICAgIGNvbnN0IHN1Y2Nlc3NvclZlcnRleFVuaW5kZXhlZCA9IHN1Y2Nlc3NvclZlcnRleC5pc1VuaW5kZXhlZCgpLFxuICAgICAgICAgICAgc3VjY2Vzc29yVmVydGV4Tm90U3Ryb25nbHlDb25uZWN0ZWQgPSBzdWNjZXNzb3JWZXJ0ZXhVbmluZGV4ZWQ7ICAvLy9cblxuICAgICAgaWYgKHN1Y2Nlc3NvclZlcnRleE5vdFN0cm9uZ2x5Q29ubmVjdGVkKSB7XG4gICAgICAgIHN0cm9uZ2x5Q29ubmVjdFZlcnRleChzdWNjZXNzb3JWZXJ0ZXgpO1xuXG4gICAgICAgIGNvbnN0IHN1Y2Nlc3NvclZlcnRleExvd2VzdEluZGV4ID0gc3VjY2Vzc29yVmVydGV4LmdldExvd2VzdEluZGV4KCk7XG5cbiAgICAgICAgdmVydGV4LnVwZGF0ZUxvd2VzdEluZGV4KHN1Y2Nlc3NvclZlcnRleExvd2VzdEluZGV4KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHN1Y2Nlc3NvclZlcnRleFN0YWNrZWQgPSBzdWNjZXNzb3JWZXJ0ZXguaXNTdGFja2VkKCk7XG5cbiAgICAgICAgaWYgKHN1Y2Nlc3NvclZlcnRleFN0YWNrZWQpIHtcbiAgICAgICAgICBjb25zdCBzdWNjZXNzb3JWZXJ0ZXhJbmRleCA9IHN1Y2Nlc3NvclZlcnRleC5nZXRJbmRleCgpO1xuXG4gICAgICAgICAgdmVydGV4LnVwZGF0ZUxvd2VzdEluZGV4KHN1Y2Nlc3NvclZlcnRleEluZGV4KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgY29uc3QgdmVydGV4TG93ZXN0ID0gdmVydGV4LmlzTG93ZXN0KCk7XG5cbiAgICBpZiAodmVydGV4TG93ZXN0KSB7XG4gICAgICBjb25zdCBzdHJvbmdseUNvbm5lY3RlZENvbXBvbmVudCA9IFN0cm9uZ2x5Q29ubmVjdGVkQ29tcG9uZW50LmZyb21TdGFja0FuZFZlcnRleChzdGFjaywgdmVydGV4KTtcblxuICAgICAgc3Ryb25nbHlDb25uZWN0ZWRDb21wb25lbnRzLnB1c2goc3Ryb25nbHlDb25uZWN0ZWRDb21wb25lbnQpO1xuICAgIH1cbiAgfVxuXG4gIHZlcnRpY2VzLmZvckVhY2goZnVuY3Rpb24odmVydGV4KSB7XG4gICAgY29uc3QgdmVydGV4VW5pbmRleGVkID0gdmVydGV4LmlzVW5pbmRleGVkKCk7XG5cbiAgICBpZiAodmVydGV4VW5pbmRleGVkKSB7XG4gICAgICBzdHJvbmdseUNvbm5lY3RWZXJ0ZXgodmVydGV4KTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBzdHJvbmdseUNvbm5lY3RlZENvbXBvbmVudHM7XG59XG5cbmZ1bmN0aW9uIGN5Y2xlc0Zyb21TdHJvbmdseUNvbm5lY3RlZENvbXBvbmVudHMoc3Ryb25nbHlDb25uZWN0ZWRDb21wb25lbnRzKSB7XG4gIGNvbnN0IGN5Y2xlcyA9IHN0cm9uZ2x5Q29ubmVjdGVkQ29tcG9uZW50cy5yZWR1Y2UoZnVuY3Rpb24oY3ljbGVzLCBzdHJvbmdseUNvbm5lY3RlZENvbXBvbmVudCkge1xuICAgIGNvbnN0IHN0cm9uZ2x5Q29ubmVjdGVkQ29tcG9uZW50Q3ljbGljID0gc3Ryb25nbHlDb25uZWN0ZWRDb21wb25lbnQuaXNDeWNsaWMoKTtcblxuICAgIGlmIChzdHJvbmdseUNvbm5lY3RlZENvbXBvbmVudEN5Y2xpYykge1xuICAgICAgY29uc3QgY3ljbGUgPSBDeWNsZS5mcm9tU3Ryb25nbHlDb25uZWN0ZWRDb21wb25lbnQoc3Ryb25nbHlDb25uZWN0ZWRDb21wb25lbnQpO1xuXG4gICAgICBjeWNsZXMucHVzaChjeWNsZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGN5Y2xlcztcbiAgfSwgW10pO1xuXG4gIHJldHVybiBjeWNsZXM7XG59XG4iXX0=